# Calculate the number of continuous covariates needed
# 10 for 2 categorical, 4 interactions, and 4 polynomials
p <- p - 10
# Set the mean vector for continuous covariates
u_x <- c(rep(2, 10), rep(5, 30), rep(8, p - 40))
# Set the covariance matrix with AR(1) structure
sigma_x <- matrix(rho^abs(outer(1:p, 1:p, "-")), p, p)
# Generate the continuous covariates X
X <- MASS::mvrnorm(n, mu = u_x, Sigma = sigma_x)
# Generate binary categorical variable
cat_var1 <- sample(c(0, 1), n, replace = TRUE) %>%
as.factor()
# Treat as ordinal categorical variable
cat_var2 <- sample(1:5, n, replace = TRUE) %>%
as.factor()
# Generate interaction terms (multiplying first and second continuous covariate)
interaction_term_1_2 <- X[, 1] * X[, 2]
interaction_term_3_4 <- X[, 3] * X[, 4]
interaction_term_21_22 <- X[, 21] * X[, 22]
interaction_term_c1_22 <- interaction(cat_var1, X[, 22])
# Generate polynomial feature (squared third continuous covariate)
polynomial_feature_5_2 <- X[, 5]^2
polynomial_feature_6_3 <- X[, 6]^3
polynomial_feature_23_2 <- X[, 23]^2
polynomial_feature_23_3 <- X[, 23]^3
# Generate the true regression coefficients beta
beta <- c(rep(6, 5), rep(4, 5), rep(3, 5), rep(0, p - 15))
# Generate the error terms
epsilon <- rnorm(n, mean = 0, sd = sigma_e)
# Add the intercept too
intercept <- 2
# Define the betas
beta_cat_var1 <- 4
beta_it_1_2 <- 3
beta_p_23_2 <- 6
# Use zero for all other betas
beta_cat_var2 <- 0
beta_it_3_4 <- 0
beta_it_21_22 <- 0
beta_it_c1_22 <- 0
beta_p_5 <- 0
beta_p_6 <- 0
beta_p_23_3 <- 0
# Generate the response variable y
y <- intercept + X %*% beta +
beta_cat_var1 * as.numeric(cat_var1) +
beta_cat_var2 * as.numeric(cat_var2) +
beta_it_1_2 * interaction_term_1_2 +
beta_it_3_4 * interaction_term_3_4 +
beta_it_21_22 * interaction_term_21_22 +
beta_it_c1_22 * as.numeric(interaction_term_c1_22) +
beta_p_5 * polynomial_feature_5_2 +
beta_p_6 * polynomial_feature_6_3 +
beta_p_23_2 * polynomial_feature_23_2 +
beta_p_23_3 * polynomial_feature_23_3 +
epsilon
# Combine continuous covariates, categorical vars, interaction terms,
# polynomial features and y into a data frame
sim_data <- as.data.frame(cbind(y,
cat_var1,
cat_var2,
interaction_term_1_2,
interaction_term_3_4,
interaction_term_21_22,
interaction_term_c1_22,
polynomial_feature_5_2,
polynomial_feature_6_3,
polynomial_feature_23_2,
polynomial_feature_23_3, X))
# Make sure the categorical variables are factors
sim_data$cat_var1 <- as.factor(sim_data$cat_var1)
sim_data$cat_var2 <- as.factor(sim_data$cat_var2)
# Name the columns of the data frame
colnames(sim_data) <- c("y", "cat_var1", "cat_var2",
"interaction_1_2", "interaction_3_4",
"interaction_21_22", "interaction_term_c1_22",
"poly_5_2", "poly_6_3", "poly_23_2", "poly_23_3",
paste0("X", 1:p))
# Return the dataset
return(sim_data)
}
# Simulate where p < n
T3_LD <- simulate_T3(p = 50, n = 200)
# Simulate where p = n
T3_ED <- simulate_T3(p = 100, n = 100)
# Simulate where p > n
T3_HD <- simulate_T3(p = 200, n = 150)
# Simulate where p >> n
T3_VD <- simulate_T3(p = 200, n = 50)
# Simulate for XGBoost p << n
T3_XD <- simulate_T3(p = 50, n = 500)
#### SIMULATE T4 GROUPED CONTINUOUS DATA WITH CATEGORICAL VARIABLES AND INTERACTIONS ####
# Function to simulate a T4 type data set
# INPUT:
#       p - number of continuous covariates
#       n - number of data points to simulate
#       rho - within-group correlation coefficient
#       sigma_e - variance of the error term
#       seed - seed for random number generation
# OUTPUT:
#       sim_data - data frame with simulated data
simulate_T4 <- function(p, n, rho = 0.6, sigma_e = sqrt(10), seed = 42) {
# Input validation
if (!is.numeric(p) || p <= 0 || floor(p) != p || p %% 5 != 0) {
stop("p must be a positive integer that is divisible by 5")
}
if (!is.numeric(n) || n <= 0 || floor(n) != n) {
stop("n must be a positive integer")
}
if (!is.numeric(rho) || rho < -1 || rho > 1) {
stop("rho must be a numeric value between -1 and 1")
}
if (!is.null(seed) && (!is.numeric(seed) || seed < 0 || floor(seed) != seed)) {
stop("seed must be a non-negative integer or NULL")
}
# Set seed if provided
if (!is.null(seed)) {
set.seed(seed)
}
# Adjust p to generate the correct number of continuous variables
p <- p - 5
# Group sizes
group_sizes <- rep(p / 5, 5)
# Covariance matrices for each group
cov_matrices <- lapply(1:5, function(i) {
matrix(rho, nrow = group_sizes[i], ncol = group_sizes[i]) +
diag(rep(1 - rho, group_sizes[i]))
})
# Set the means for each group
u_x <- rep(seq(2, 10, by = 2), times = group_sizes)
# Generating continuous covariates X
X <- do.call(cbind, lapply(1:length(cov_matrices), function(i) {
MASS::mvrnorm(n, mu = rep(u_x[i], ncol(cov_matrices[[i]])), Sigma = cov_matrices[[i]])
}))
# Generate binary categorical variable
cat_var1 <- sample(c(0, 1), n, replace = TRUE) %>%
as.factor()
# Treat as ordinal categorical variable
cat_var2 <- sample(1:5, n, replace = TRUE) %>%
as.factor()
# Inclute 2 interaction terms
# Generate interaction terms
interaction_term_1_2_3 <- X[, 1] * X[, 2] * X[, 3]
interaction_term_4_5 <- X[, 4] * X[, 5]
interaction_term_16_17 <- X[, 16] * X[, 17]
# Generating true regression coefficients beta
beta <- c(rep(6, 5), rep(4, 5), rep(3, 5), rep(0, p - 15))
# Define the betas
beta_cat_var1 <- 4
beta_cat_var2 <- 0
beta_it_1_2_3 <- 3
beta_it_4_5 <- 0
beta_it_16_17 <- 0
# Generate the error terms
epsilon <- rnorm(n, mean = 0, sd = sigma_e)
# Generate the response variable y
y <- X %*% beta +
beta_cat_var1 * as.numeric(cat_var1) +
beta_cat_var2 * as.numeric(cat_var2) +
beta_it_1_2_3 * interaction_term_1_2_3 +
beta_it_4_5 * interaction_term_4_5 +
beta_it_16_17 * interaction_term_16_17 +
epsilon
# Combine continuous covariates and y into a data frame
# Combine continuous covariates, categorical vars, interaction terms,
# polynomial features and y into a data frame
sim_data <- as.data.frame(cbind(y,
cat_var1,
cat_var2,
interaction_term_1_2_3,
interaction_term_4_5,
interaction_term_16_17,
X))
# Make sure the categorical variables are factors
sim_data$cat_var1 <- as.factor(sim_data$cat_var1)
sim_data$cat_var2 <- as.factor(sim_data$cat_var2)
# Name the columns of the data frame
colnames(sim_data) <- c("y", "cat_var1", "cat_var2",
"interaction_term_1_2_3", "interaction_term_4_5",
"interaction_term_16_17",
paste0("X", 1:p))
# Return the dataset
return(sim_data)
}
# Simulate where p < n
T4_LD <- simulate_T4(p = 50, n = 200)
# Simulate where p = n
T4_ED <- simulate_T4(p = 100, n = 100)
# Simulate where p > n
T4_HD <- simulate_T4(p = 200, n = 150)
# Simulate where p >> n
T4_VD <- simulate_T4(p = 200, n = 50)
# Simulate for XGBoost p << n
T4_XD <- simulate_T4(p = 50, n = 500)
# Remove functions
rm(simulate_T1, simulate_T2, simulate_T3, simulate_T4)
p = 50
# Adjust p to generate the correct number of continuous variables
p <- p - 5
# Group sizes
group_sizes <- rep(p / 5, 5)
# Covariance matrices for each group
cov_matrices <- lapply(1:5, function(i) {
matrix(rho, nrow = group_sizes[i], ncol = group_sizes[i]) +
diag(rep(1 - rho, group_sizes[i]))
})
# Set the means for each group
u_x <- rep(seq(2, 10, by = 2), times = group_sizes)
u_x <- rep(seq(2, by = 2, length.out = p), times = group_sizes)
group_sizes
seq(2, by = 2, length.out = p)
rep(seq(2, 10, by = 2), times = group_sizes)
rho = 0.6
sigma_e = sqrt(10)
seed = 42
p = 50
n = 200
# Adjust p to generate the correct number of continuous variables
p <- p - 5
# Group sizes
group_sizes <- rep(p / 5, 5)
# Covariance matrices for each group
cov_matrices <- lapply(1:5, function(i) {
matrix(rho, nrow = group_sizes[i], ncol = group_sizes[i]) +
diag(rep(1 - rho, group_sizes[i]))
})
# Set the means for each group
u_x <- rep(seq(2, 10, by = 2), times = group_sizes)
u_x
# Generating continuous covariates X
X <- do.call(cbind, lapply(1:length(cov_matrices), function(i) {
MASS::mvrnorm(n, mu = rep(u_x[i], ncol(cov_matrices[[i]])), Sigma = cov_matrices[[i]])
}))
# Generate binary categorical variable
cat_var1 <- sample(c(0, 1), n, replace = TRUE) %>%
as.factor()
# Treat as ordinal categorical variable
cat_var2 <- sample(1:5, n, replace = TRUE) %>%
as.factor()
#### SET UP ####
# Combine the list of libraries from both scripts
library_list <- c("tidyverse", "corrplot", "betareg", "R.matlab", "glmnet", "dplyr",
"cowplot", "coda", "car", "igraph", "R6", "nimble", "MASS", "xgboost",
"caret", "spikeslab", "SSLASSO", "horseshoe", "bayesreg", "Hmisc",
"LaplacesDemon", "BayesS5", "monomvn", "Hmisc", "gridExtra", "maps")
# Un-comment the following lines if you need to install the packages
# for (i in library_list) {
#   install.packages(i, character.only = TRUE)
# }
# Load the libraries
for (i in library_list) {
library(i, character.only = TRUE)
}
# Set working directory (assuming you want to set it to the 'main' directory)
setwd("~/Documents/Dissertation/main/Dissertation")
# Remove unwanted objects
rm(library_list, i)
# Source the file that contains the simulation functions
source("simulate_data.R")
# Source the file that contains the simulation functions
source("functions.R")
# T1 Data
blasso_T1_LD <- fit_blasso(data = T1_LD)
Package = c("glmnet", "glmnet", "xgboost", "spikeslab", "SSLASSO", "horseshoe", "horseshoe",
"bayesreg", "bayesreg", "BayesS5", "monomvn")
Package = c("glmnet", "glmnet", "xgboost", "spikeslab", "SSLASSO", "horseshoe", "horseshoe",
"bayesreg", "bayesreg", "BayesS5", "monomvn")
Method = c("LASSO", "Elastic Net", "XGBoost", "Spike-and-Slab Prior",
"Spike-and-Slab LASSO", "Horseshoe Prior, TC", "Horseshoe Prior, HC",
"Horseshoe Prior", "Horseshoe+ Prior", "S5 Method", "Bayesian LASSO")
TS1 = c(20, 20, "", 20, 20, 20, 20, 20, 20, rep("", 4))
TS1 = c(20, 20, "", 20, 20, 20, 20, 20, 20, "", "")
results_XGBoost <- data.frame(
Data = c("Type 1", "Type 2", "Type 3", "Type 4"),
TS1 = c("", "", "", "", ""),
FP1 = c("", "", "", "", ""),
FN1 = c("", "", "", "", ""),
EMPTY1 = rep("", 5),
TS2 = c("", "", "", "", ""),
FP2 = c("", "", "", "", ""),
FN2 = c("", "", "", "", ""),
EMPTY2 = rep("", 5),
TS3 = c("", "", "", "", ""),
FP3 = c("", "", "", "", ""),
FN3 = c("", "", "", "", ""),
EMPTY3 = rep("", 5),
TS4 = c("", "", "", "", ""),
FP4 = c("", "", "", "", ""),
FN4 = c("", "", "", "", ""),
EMPTY4 = rep("", 5),
TS5 = c("", "", "", "", ""),
FP5 = c("", "", "", "", ""),
FN5 = c("", "", "", "", ""),
stringsAsFactors = FALSE
)
# Create data frame
results_XGBoost <- data.frame(
Data = c("Type 1", "Type 2", "Type 3", "Type 4", "Type 5"),
TS1 = c("", "", "", "", ""),
FP1 = c("", "", "", "", ""),
FN1 = c("", "", "", "", ""),
EMPTY1 = rep("", 5),
TS2 = c("", "", "", "", ""),
FP2 = c("", "", "", "", ""),
FN2 = c("", "", "", "", ""),
EMPTY2 = rep("", 5),
TS3 = c("", "", "", "", ""),
FP3 = c("", "", "", "", ""),
FN3 = c("", "", "", "", ""),
EMPTY3 = rep("", 5),
TS4 = c("", "", "", "", ""),
FP4 = c("", "", "", "", ""),
FN4 = c("", "", "", "", ""),
EMPTY4 = rep("", 5),
TS5 = c("", "", "", "", ""),
FP5 = c("", "", "", "", ""),
FN5 = c("", "", "", "", ""),
stringsAsFactors = FALSE
)
# Define headers to span across columns
header_across <- c(" " = 2, "p << n" = 4, "p < n" = 4, "p = n" = 3, "p > n" = 4, "p >> n" = 4)
# Plot the results
kable(results_XGBoost, "latex", booktabs = TRUE,
col.names = c("Data", "TS", "FP", "FN", "", "TS", "FP", "FN",
"", "TS", "FP", "FN", "", "TS", "FP", "FN", "", "TS", "FP", "FN"),
escape = FALSE) %>%
kable_styling(font_size = 8.5, full_width = FALSE, latex_options = "hold_position") %>%
column_spec(1:17, border_right = TRUE) %>%
add_header_above(header_across, escape = FALSE) %>%
add_footnote(c("TS=True Signal, FP=False Positive, FN=False Negative",
"p(50) << n(500), p(50) < n(200), p(100) = n(100), p(200) > n(150), p(200) >> n(50)"))
library(knitr)
library(kableExtra)
# Plot the results
kable(results_XGBoost, "latex", booktabs = TRUE,
col.names = c("Data", "TS", "FP", "FN", "", "TS", "FP", "FN",
"", "TS", "FP", "FN", "", "TS", "FP", "FN", "", "TS", "FP", "FN"),
escape = FALSE) %>%
kable_styling(font_size = 8.5, full_width = FALSE, latex_options = "hold_position") %>%
column_spec(1:17, border_right = TRUE) %>%
add_header_above(header_across, escape = FALSE) %>%
add_footnote(c("TS=True Signal, FP=False Positive, FN=False Negative",
"p(50) << n(500), p(50) < n(200), p(100) = n(100), p(200) > n(150), p(200) >> n(50)"))
FN4 = c(10, 8, 8, 0, 19, 20, 13, 12, "", "")
# Create data frame
results_T1 <- data.frame(
Package = c("glmnet", "glmnet", "xgboost", "spikeslab", "SSLASSO", "horseshoe", "horseshoe",
"bayesreg", "bayesreg", "BayesS5", "monomvn"),
Method = c("LASSO", "Elastic Net", "XGBoost", "Spike-and-Slab Prior",
"Spike-and-Slab LASSO", "Horseshoe Prior, TC", "Horseshoe Prior, HC",
"Horseshoe Prior", "Horseshoe+ Prior", "S5 Method", "Bayesian LASSO"),
TS1 = c(20, 20, 20, 20, 20, 20, 20, 20, "", ""),
FP1 = c(19, 12, 20, 1, 0, 0, 0, 0, "", ""),
FN1 = c(0, 0, 0, 0, 0, 0, 0, 0, "", ""),
EMPTY1 = rep("", 10),
TS2 = c(20, 20, 20, 15, 20, 20, 20, 20, "", ""),
FP2 = c(50, 37, 79, 5, 1, 1, 1, 1, "", ""),
FN2 = c(0, 0, 0, 5, 0, 0, 0, 0, "", ""),
EMPTY2 = rep("", 10),
TS3 = c(20, 20, 20, 6, 20, 20, 20, 20, "", ""),
FP3 = c(37, 10, 117, 5, 0, 0, 0, 0, "", ""),
FN3 = c(0, 0, 0, 14, 0, 0, 0, 0, "", ""),
EMPTY3 = rep("", 10),
TS4 = c(10, 12, 12, 20, 1, 0, 7, 8, "", ""),
FP4 = c(22, 18, 12, 0, 0, 0, 5, 5, "", ""),
FN4 = c(10, 8, 8, 0, 19, 20, 13, 12, "", ""),
stringsAsFactors = FALSE
)
Method = c("LASSO", "Elastic Net", "XGBoost", "Spike-and-Slab Prior",
"Spike-and-Slab LASSO", "Horseshoe Prior, TC", "Horseshoe Prior, HC",
"Horseshoe Prior", "Horseshoe+ Prior", "S5 Method", "Bayesian LASSO")
# Create data frame
results_T1 <- data.frame(
Package = c("glmnet", "glmnet", "spikeslab", "SSLASSO", "horseshoe", "horseshoe",
"bayesreg", "bayesreg", "BayesS5", "monomvn"),
Method = c("LASSO", "Elastic Net", "Spike-and-Slab Prior",
"Spike-and-Slab LASSO", "Horseshoe Prior, TC", "Horseshoe Prior, HC",
"Horseshoe Prior", "Horseshoe+ Prior", "S5 Method", "Bayesian LASSO"),
TS1 = c(20, 20, 20, 20, 20, 20, 20, 20, "", ""),
FP1 = c(19, 12, 20, 1, 0, 0, 0, 0, "", ""),
FN1 = c(0, 0, 0, 0, 0, 0, 0, 0, "", ""),
EMPTY1 = rep("", 10),
TS2 = c(20, 20, 20, 15, 20, 20, 20, 20, "", ""),
FP2 = c(50, 37, 79, 5, 1, 1, 1, 1, "", ""),
FN2 = c(0, 0, 0, 5, 0, 0, 0, 0, "", ""),
EMPTY2 = rep("", 10),
TS3 = c(20, 20, 20, 6, 20, 20, 20, 20, "", ""),
FP3 = c(37, 10, 117, 5, 0, 0, 0, 0, "", ""),
FN3 = c(0, 0, 0, 14, 0, 0, 0, 0, "", ""),
EMPTY3 = rep("", 10),
TS4 = c(10, 12, 12, 20, 1, 0, 7, 8, "", ""),
FP4 = c(22, 18, 12, 0, 0, 0, 5, 5, "", ""),
FN4 = c(10, 8, 8, 0, 19, 20, 13, 12, "", ""),
stringsAsFactors = FALSE
)
# Define headers to span across columns
header_across <- c(" " = 2, "p < n" = 4, "p = n" = 4, "p > n" = 3, "p >> n" = 4)
# Plot the results
kable(results_T1, "latex", booktabs = TRUE,
col.names = c("Package", "Method", "TS", "FP", "FN", "", "TS", "FP", "FN",
"", "TS", "FP", "FN", "", "TS", "FP", "FN"),
escape = FALSE) %>%
kable_styling(font_size = 8.5, full_width = FALSE, latex_options = "hold_position") %>%
column_spec(1:12, border_right = TRUE) %>%
add_header_above(header_across, escape = FALSE) %>%
pack_rows("Frequentist Methods", 1, 2) %>%
pack_rows("Machine Learning Methods", 3, 3) %>%
pack_rows("Bayesian Methods", 4, 12) %>%
add_footnote(c("TS=True Signal, FP=False Positive, FN=False Negative",
"p(50) < n(200), p(100) = n(100), p(200) > n(150), p(200) >> n(50)"))
# Plot the results
kable(results_T1, "latex", booktabs = TRUE,
col.names = c("Package", "Method", "TS", "FP", "FN", "", "TS", "FP", "FN",
"", "TS", "FP", "FN", "", "TS", "FP", "FN"),
escape = FALSE) %>%
kable_styling(font_size = 8.5, full_width = FALSE, latex_options = "hold_position") %>%
column_spec(1:17, border_right = TRUE) %>%
add_header_above(header_across, escape = FALSE) %>%
pack_rows("Frequentist Methods", 1, 2) %>%
pack_rows("Machine Learning Methods", 3, 3) %>%
pack_rows("Bayesian Methods", 4, 12) %>%
add_footnote(c("TS=True Signal, FP=False Positive, FN=False Negative",
"p(50) < n(200), p(100) = n(100), p(200) > n(150), p(200) >> n(50)"))
# Plot the results
kable(results_T1, "latex", booktabs = TRUE,
col.names = c("Package", "Method", "TS", "FP", "FN", "", "TS", "FP", "FN",
"", "TS", "FP", "FN", "", "TS", "FP", "FN"),
escape = FALSE) %>%
kable_styling(font_size = 8.5, full_width = FALSE, latex_options = "hold_position") %>%
column_spec(1:17, border_right = TRUE) %>%
add_header_above(header_across, escape = FALSE) %>%
pack_rows("Frequentist Methods", 1, 2) %>%
pack_rows("Bayesian Methods", 3, 11) %>%
add_footnote(c("TS=True Signal, FP=False Positive, FN=False Negative",
"p(50) < n(200), p(100) = n(100), p(200) > n(150), p(200) >> n(50)"))
# Create data frame
results_XGBoost <- data.frame(
Data = c("Type 1", "Type 2", "Type 3", "Type 4", "Type 5"),
TS1 = c("", "", "", "", ""),
FP1 = c("", "", "", "", ""),
FN1 = c("", "", "", "", ""),
EMPTY1 = rep("", 5),
TS2 = c("", "", "", "", ""),
FP2 = c("", "", "", "", ""),
FN2 = c("", "", "", "", ""),
EMPTY2 = rep("", 5),
TS3 = c("", "", "", "", ""),
FP3 = c("", "", "", "", ""),
FN3 = c("", "", "", "", ""),
EMPTY3 = rep("", 5),
TS4 = c("", "", "", "", ""),
FP4 = c("", "", "", "", ""),
FN4 = c("", "", "", "", ""),
EMPTY4 = rep("", 5),
TS5 = c("", "", "", "", ""),
FP5 = c("", "", "", "", ""),
FN5 = c("", "", "", "", ""),
stringsAsFactors = FALSE
)
# Define headers to span across columns
header_across <- c(" " = 2, "p << n" = 4, "p < n" = 4, "p = n" = 3, "p > n" = 4, "p >> n" = 4)
# Plot the results
kable(results_XGBoost, "latex", booktabs = TRUE,
col.names = c("Data", "TS", "FP", "FN", "", "TS", "FP", "FN",
"", "TS", "FP", "FN", "", "TS", "FP", "FN", "", "TS", "FP", "FN"),
escape = FALSE) %>%
kable_styling(font_size = 8.5, full_width = FALSE, latex_options = "hold_position") %>%
column_spec(1:20, border_right = TRUE) %>%
add_header_above(header_across, escape = FALSE) %>%
add_footnote(c("TS=True Signal, FP=False Positive, FN=False Negative",
"p(50) << n(500), p(50) < n(200), p(100) = n(100), p(200) > n(150), p(200) >> n(50)"))
# Create data frame
results_XGBoost <- data.frame(
Data = c("Type 1", "Type 2", "Type 3", "Type 4", "Type 5"),
TS1 = c("", "", "", "", ""),
FP1 = c("", "", "", "", ""),
FN1 = c("", "", "", "", ""),
EMPTY1 = rep("", 5),
TS2 = c("", "", "", "", ""),
FP2 = c("", "", "", "", ""),
FN2 = c("", "", "", "", ""),
EMPTY2 = rep("", 5),
TS3 = c("", "", "", "", ""),
FP3 = c("", "", "", "", ""),
FN3 = c("", "", "", "", ""),
EMPTY3 = rep("", 5),
TS4 = c("", "", "", "", ""),
FP4 = c("", "", "", "", ""),
FN4 = c("", "", "", "", ""),
EMPTY4 = rep("", 5),
TS5 = c("", "", "", "", ""),
FP5 = c("", "", "", "", ""),
FN5 = c("", "", "", "", ""),
stringsAsFactors = FALSE
)
# Plot the results
kable(results_XGBoost, "latex", booktabs = TRUE,
col.names = c("Data", "TS", "FP", "FN", "", "TS", "FP", "FN",
"", "TS", "FP", "FN", "", "TS", "FP", "FN", "", "TS", "FP", "FN"),
escape = FALSE) %>%
kable_styling(font_size = 8.5, full_width = FALSE, latex_options = "hold_position") %>%
column_spec(1:20, border_right = TRUE) %>%
#add_header_above(header_across, escape = FALSE) %>%
add_footnote(c("TS=True Signal, FP=False Positive, FN=False Negative",
"p(50) << n(500), p(50) < n(200), p(100) = n(100), p(200) > n(150), p(200) >> n(50)"))
# Plot the results
kable(results_XGBoost, "latex", booktabs = TRUE,
col.names = c("Data", "TS", "FP", "FN", "", "TS", "FP", "FN",
"", "TS", "FP", "FN", "", "TS", "FP", "FN", "", "TS", "FP", "FN"),
escape = FALSE) %>%
kable_styling(font_size = 8.5, full_width = FALSE, latex_options = "hold_position") %>%
column_spec(1:20, border_right = TRUE) #%>%
